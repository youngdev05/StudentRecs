import torch
import torch.nn as nn
import torch.optim as optim
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
torch.serialization.add_safe_globals([StandardScaler])

class Net(nn.Module):
    def __init__(self, input_size):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.bn1 = nn.BatchNorm1d(128)
        self.dropout1 = nn.Dropout(0.3)

        self.fc2 = nn.Linear(128, 64)
        self.bn2 = nn.BatchNorm1d(64)
        self.dropout2 = nn.Dropout(0.3)

        self.fc3 = nn.Linear(64, 32)
        self.bn3 = nn.BatchNorm1d(32)
        self.dropout3 = nn.Dropout(0.3)

        self.out = nn.Linear(32, 1)

    def forward(self, x):
        x = self.dropout1(torch.relu(self.bn1(self.fc1(x))))
        x = self.dropout2(torch.relu(self.bn2(self.fc2(x))))
        x = self.dropout3(torch.relu(self.bn3(self.fc3(x))))
        return torch.sigmoid(self.out(x))

def train():
    # –í–ù–ò–ú–ê–ù–ò–ï: gpa –∏ grade —Ç–µ–ø–µ—Ä—å –≤ 100-–±–∞–ª–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ (gpa: 40-100, grade: 0-100)
    # –í—Å–µ –ø–æ—Ä–æ–≥–∏ —É—Å–ø–µ—Ö–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç–æ–π —à–∫–∞–ª–µ
    import torch
    import torch.nn as nn
    import torch.optim as optim
    import pandas as pd
    import numpy as np
    from sklearn.model_selection import train_test_split
    from sklearn.preprocessing import StandardScaler
    from sklearn.metrics import classification_report, confusion_matrix

    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–∞—é—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    df = pd.read_csv('C:/Users/dimas/CsvGenerator/data/training_data.csv')

    # One-hot –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö
    df = pd.get_dummies(df, columns=['major', 'course_category', 'course_difficulty'])

    # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤
    class_0 = df[df['success'] == 0]
    class_1 = df[df['success'] == 1]
    min_len = min(len(class_0), len(class_1))
    df = pd.concat([class_0.sample(min_len, random_state=42),
                    class_1.sample(min_len, random_state=42)])

    # –û—Ç–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    feature_names = [col for col in df.columns if col not in ['student_id', 'course_id', 'success']]
    X = df[feature_names]
    y = df['success']

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫–∏
    X_train, X_val, y_train, y_val = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

    # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ç–µ–Ω–∑–æ—Ä—ã
    X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
    y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)

    # –ú–æ–¥–µ–ª—å –∏ –æ–±—É—á–µ–Ω–∏–µ
    model = Net(X_train.shape[1])
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    for epoch in range(200):
        model.train()
        optimizer.zero_grad()
        outputs = model(X_train_tensor)
        loss = criterion(outputs, y_train_tensor)
        loss.backward()
        optimizer.step()

        if epoch % 10 == 0:
            print(f"Epoch {epoch} | Loss: {loss.item():.4f}")

    print("\n‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å –æ–±—É—á–µ–Ω–∞!")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    model.eval()
    X_val_tensor = torch.tensor(X_val, dtype=torch.float32)
    with torch.no_grad():
        predictions = model(X_val_tensor).numpy()
        predicted_labels = (predictions > 0.5).astype(int)

    print("\nüìä Classification Report:")
    print(confusion_matrix(y_val, predicted_labels))
    print(classification_report(y_val, predicted_labels, digits=3))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Å–∫–µ–π–ª–µ—Ä–∞
    torch.save({
        'model_state_dict': model.state_dict(),
        'scaler': scaler,
        'feature_names': feature_names
    }, 'C:/Users/dimas/CsvGenerator/src/course_recommender_nn.pt')

    print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")



if __name__ == '__main__':
    train()
