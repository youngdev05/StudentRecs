import pandas as pd
import random
import os
import numpy as np
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
num_students = 300  # –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
num_courses = 24  # –ë–æ–ª—å—à–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
min_grades_per_student = 3
max_grades_per_student = 8  # –°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –∫—É—Ä—Å–æ–≤

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤ –∏ –∏—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç—å
categories = {
    'Math': {'difficulty': 'Hard', 'credits': 6},
    'Computer Science': {'difficulty': 'Medium', 'credits': 6},
    'Physics': {'difficulty': 'Hard', 'credits': 6},
    'History': {'difficulty': 'Easy', 'credits': 4},
    'Philosophy': {'difficulty': 'Easy', 'credits': 4},
    'Economics': {'difficulty': 'Medium', 'credits': 4}
}


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
def generate_students(n):
    data = []
    for i in range(1, n + 1):
        major = random.choice(['CS', 'Math', 'History', 'Physics'])
        year = random.randint(1, 4)

        # GPA –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
        base_gpa = {
                       'CS': 3.2, 'Math': 3.0, 'History': 3.5, 'Physics': 3.1
                   }[major] + (year * 0.1)

        gpa = max(2.0, min(5.0, round(np.random.normal(base_gpa, 0.5), 2)))

        # –ù–æ–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫: –º–æ—Ç–∏–≤–∞—Ü–∏—è (–æ—Ç 0 –¥–æ 1)
        motivation = round(np.clip(np.random.beta(2, 2), 0, 1), 2)

        data.append({
            'student_id': i,
            'major': major,
            'year_of_study': year,
            'gpa': gpa,
            'motivation': motivation
        })
    return pd.DataFrame(data)


students = generate_students(num_students)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
courses = pd.DataFrame({
    'course_id': range(101, 101 + num_courses),
    'name': [f'Course {i}' for i in range(1, num_courses + 1)],
    'category': [random.choice(list(categories.keys())) for _ in range(num_courses)]
})
courses['difficulty_level'] = courses['category'].map(lambda x: categories[x]['difficulty'])
courses['credits'] = courses['category'].map(lambda x: categories[x]['credits'])
# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
courses['individual_difficulty'] = np.random.uniform(-0.15, 0.15, size=len(courses))


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ü–µ–Ω–æ–∫ —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–æ—Ä–æ–≤
def generate_grade(student, course):
    # –ñ—ë—Å—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—Ö–∞
    if course['difficulty_level'] == 'Hard' and student['gpa'] < 2.7:
        score = 0.3 + np.random.normal(0, 0.05)  # –≤—Å–µ–≥–¥–∞ –Ω–∏–∑–∫–æ
    elif course['difficulty_level'] == 'Easy' and student['gpa'] > 4.0:
        score = 0.9 + np.random.normal(0, 0.05)  # –≤—Å–µ–≥–¥–∞ –≤—ã—Å–æ–∫–æ
    else:
        difficulty_weight = {'Easy': 0, 'Medium': -0.25, 'Hard': -0.5}
        major_affinity = {
            'CS': {'Computer Science': 0.2, 'Math': 0.1, 'Economics': 0.05},
            'Math': {'Math': 0.25, 'Physics': 0.15, 'Computer Science': 0.1},
            'History': {'History': 0.3, 'Philosophy': 0.2},
            'Physics': {'Physics': 0.3, 'Math': 0.15}
        }
        motivation = student.get('motivation', 0.5)
        motivation_effect = (motivation - 0.5) * 0.15
        gpa_norm = (student['gpa'] - 2.0) / 3.0
        gpa_norm = max(0, min(1, gpa_norm))
        diff = difficulty_weight[course['difficulty_level']]
        affinity = major_affinity[student['major']].get(course['category'], 0)
        year_bonus = student['year_of_study'] * 0.02
        noise = np.random.normal(0, 0.10)
        individual_diff = course.get('individual_difficulty', 0)
        if course['difficulty_level'] == 'Easy':
            score = 0.55 * gpa_norm + 0.15 + affinity + year_bonus + motivation_effect + noise + individual_diff
        elif course['difficulty_level'] == 'Medium':
            score = 0.45 * gpa_norm + diff + affinity + year_bonus + motivation_effect + noise + individual_diff
        else:  # Hard
            score = 0.35 * gpa_norm + diff + affinity + year_bonus + motivation_effect + noise + individual_diff
        if student['gpa'] < 2.5:
            if course['difficulty_level'] == 'Hard':
                score = min(score, 0.45)
            elif course['difficulty_level'] == 'Medium':
                score = min(score, 0.6)
        if student['gpa'] > 4.0:
            if course['difficulty_level'] == 'Easy':
                score = max(score, 0.8)
            elif course['difficulty_level'] == 'Medium':
                score = max(score, 0.7)
            elif course['difficulty_level'] == 'Hard':
                score = max(score, 0.6)
    score = max(0, min(1, score))
    if score < 0.6:
        return random.choice([2, 2.5, 3])
    elif score < 0.75:
        return random.choice([3, 3.5])
    elif score < 0.9:
        return random.choice([3.5, 4])
    else:
        return random.choice([4, 4.5, 5])


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏–π —Å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
enrollments = []
course_popularity = defaultdict(int)

for _, student in students.iterrows():
    # –°—Ç—É–¥–µ–Ω—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç –∫—É—Ä—Å—ã –Ω–µ —Å–æ–≤—Å–µ–º —Å–ª—É—á–∞–π–Ω–æ
    preferred_categories = {
        'CS': ['Computer Science', 'Math', 'Economics'],
        'Math': ['Math', 'Physics', 'Computer Science'],
        'History': ['History', 'Philosophy'],
        'Physics': ['Physics', 'Math']
    }[student['major']]

    # –í—ã–±–∏—Ä–∞–µ–º –∫—É—Ä—Å—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∫ —Å–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    available_courses = courses[courses['category'].isin(preferred_categories + ['Economics'])]
    num_courses_taken = random.randint(min_grades_per_student, max_grades_per_student)

    # –í—ã–±–æ—Ä –∫—É—Ä—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (—á—Ç–æ–±—ã –±—ã–ª–∏ –±–æ–ª–µ–µ –∏ –º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã)
    chosen = available_courses.sample(
        min(len(available_courses), num_courses_taken),
        weights=1 / (1 + available_courses['course_id'].map(course_popularity))
    )

    for _, course in chosen.iterrows():
        grade = generate_grade(student, course)
        semester = random.choice(['Fall 2023', 'Spring 2023'])
        enrollments.append((student['student_id'], course['course_id'], grade, semester))
        course_popularity[course['course_id']] += 1

enrollments = pd.DataFrame(enrollments, columns=['student_id', 'course_id', 'grade', 'semester'])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö CSV
os.makedirs("data", exist_ok=True)
students.to_csv('data/students.csv', index=False)
courses.to_csv('data/courses.csv', index=False)
enrollments.to_csv('data/enrollments.csv', index=False)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è student_course_success.csv —Å –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ–π –≥—Ä–∞–¥–∞—Ü–∏–µ–π
merged = enrollments.merge(students, on='student_id', how='left')
merged = merged.merge(courses, on='course_id', how='left')


# –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –Ω–µ –±–∏–Ω–∞—Ä–Ω–∞—è, –∞ —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏
def calculate_success(row):
    grade = row['grade']
    # –ñ—ë—Å—Ç–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ: —Å–ª–∞–±—ã–π —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—à–µ–Ω –Ω–∞ —Å–ª–æ–∂–Ω–æ–º –∫—É—Ä—Å–µ
    if row['difficulty_level'] == 'Hard' and row['gpa'] < 2.7:
        return 0
    # –°–∏–ª—å–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ –ª—ë–≥–∫–æ–º –∫—É—Ä—Å–µ ‚Äî —É—Å–ø–µ—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –≤—ã—Å–æ–∫–∞—è
    if row['difficulty_level'] == 'Easy' and row['gpa'] > 4.0:
        return 1 if grade >= 4 else 0
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Å–ø–µ—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ grade >= 3.5
    return 1 if grade >= 3.5 else 0


merged['success'] = merged.apply(calculate_success, axis=1)
success_df = merged[['student_id', 'course_id', 'success']]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
success_df.to_csv('data/student_course_success.csv', index=False)

# üîß –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É X —Å –Ω—É–∂–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏
feature_df = merged[[
    'student_id', 'course_id', 'major', 'year_of_study', 'gpa', 'motivation',
    'category', 'difficulty_level', 'credits', 'success'
]]
feature_df.rename(columns={
    'category': 'course_category',
    'difficulty_level': 'course_difficulty',
    'credits': 'course_credits'
}, inplace=True)

feature_df.to_csv('data/training_data.csv', index=False)
print("‚úÖ –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞ training_data.csv —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
print(f"–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {num_students}")
print(f"–í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {num_courses}")
print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö: {len(enrollments)}")