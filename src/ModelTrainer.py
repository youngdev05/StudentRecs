import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import joblib

def load_data(data_path='data'):
    students = pd.read_csv('C:/Users/dimas/CsvGenerator/data/students.csv')
    courses = pd.read_csv('C:/Users/dimas/CsvGenerator/data/courses.csv')
    enrollments = pd.read_csv('C:/Users/dimas/CsvGenerator/data/enrollments.csv')
    return students, courses, enrollments

def prepare_data(students, courses, enrollments):
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã
    df = pd.merge(enrollments, students, on='student_id')
    df = pd.merge(df, courses, on='course_id')

    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    df['high_grade'] = (df['grade'] >= 4).astype(int)

    # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df = pd.get_dummies(df, columns=['major', 'category', 'difficulty_level'])

    # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    X = df.drop(columns=['high_grade', 'grade', 'student_id', 'course_id', 'name', 'semester'])
    y = df['high_grade']

    return X, y

def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    print("Accuracy:", accuracy_score(y_test, y_pred))

    return model, X.columns.tolist()

def save_model(model, feature_names, filename='course_recommender.pkl'):
    joblib.dump((model, feature_names), filename)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{filename}'")

if __name__ == '__main__':
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    students, courses, enrollments = load_data()

    print("üîó –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    X, y = prepare_data(students, courses, enrollments)

    print("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model, features = train_model(X, y)

    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    save_model(model, features)