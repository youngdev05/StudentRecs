import torch
import pandas as pd
import logging
import numpy as np
from sklearn.preprocessing import StandardScaler
from src.NeuralNetTrainer import Net

# –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
torch.serialization.add_safe_globals([
    StandardScaler,
    np._core.multiarray._reconstruct,
    np.ndarray,
    np.dtype,
    np.frombuffer
])

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class CourseRecommender:
    def __init__(self, model_path: str = None):
        self.model = None
        self.scaler = None
        self.feature_names = None

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.difficulty_weights = {
            'Easy': 0.85,
            'Medium': 0.75,
            'Hard': 0.65
        }
        self.major_weights = {
            'CS': {'Computer Science': 1.1, 'Math': 1.0, 'Economics': 0.9},
            'Math': {'Math': 1.2, 'Physics': 1.1, 'Computer Science': 1.0},
            'History': {'History': 1.3, 'Philosophy': 1.1},
            'Physics': {'Physics': 1.2, 'Math': 1.1}
        }

        if model_path:
            self.load_model(model_path)

    def load_model(self, model_path: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            checkpoint = torch.load(model_path, weights_only=False)
            self.model = Net(len(checkpoint['feature_names']))
            self.model.load_state_dict(checkpoint['model_state_dict'])
            self.model.eval()
            self.scaler = checkpoint['scaler']
            self.feature_names = checkpoint['feature_names']
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def calibrate_probability(self, raw_prob: float, student: dict, course: dict) -> float:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""
        # –ë–∞–∑–æ–≤–æ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        calibrated = 0.5 + (raw_prob - 0.5) * 0.6

        # –£—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞
        calibrated *= self.difficulty_weights.get(course['difficulty_level'], 1.0)

        # –£—á–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        student_major = next(k.split('_')[1] for k, v in student.items()
                             if k.startswith('major_') and v == 1)
        major_factor = self.major_weights.get(student_major, {}).get(course['category'], 1.0)
        calibrated *= major_factor

        # –£—á–µ—Ç GPA (—á–µ–º –≤—ã—à–µ GPA, —Ç–µ–º –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è)
        gpa_factor = min(1.0, student['gpa'] / 4.0)
        calibrated = calibrated * 0.8 + calibrated * gpa_factor * 0.2

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        return max(0.3, min(0.95, calibrated))

    def prepare_student_data(self, student_data: dict) -> pd.DataFrame:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        required_fields = {'gpa', 'year_of_study'}
        if not required_fields.issubset(student_data.keys()):
            missing = required_fields - student_data.keys()
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing}")

        for major in ['CS', 'Math', 'History', 'Physics']:
            if f'major_{major}' not in student_data:
                student_data[f'major_{major}'] = 0

        return pd.DataFrame([student_data], columns=self.feature_names).fillna(0)

    def recommend_courses(self, student_data: dict, courses_df: pd.DataFrame,
                          threshold: float = 0.5, top_n: int = 5) -> list:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        if not all([self.model, self.scaler, self.feature_names]):
            raise RuntimeError("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        recommendations = []
        student_df = self.prepare_student_data(student_data)

        for _, course in courses_df.iterrows():
            input_data = student_df.copy()
            input_data[f'category_{course["category"]}'] = 1
            input_data[f'difficulty_level_{course["difficulty_level"]}'] = 1
            input_data['credits'] = course['credits']

            input_scaled = self.scaler.transform(input_data)
            input_tensor = torch.tensor(input_scaled, dtype=torch.float32)

            with torch.no_grad():
                raw_proba = self.model(input_tensor).item()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            proba = self.calibrate_probability(raw_proba, student_data, course)

            recommendations.append({
                'course_id': course['course_id'],
                'course_name': course['name'],
                'category': course['category'],
                'difficulty': course['difficulty_level'],
                'raw_probability': raw_proba,
                'calibrated_probability': proba,
                'match_score': self.calculate_match_score(student_data, course)
            })

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é
        sorted_recs = sorted(recommendations,
                             key=lambda x: (x['calibrated_probability'], x['match_score']),
                             reverse=True)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        filtered = [r for r in sorted_recs if r['calibrated_probability'] >= threshold]
        return filtered[:top_n]

    def calculate_match_score(self, student: dict, course: dict) -> float:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—É—Ä—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç—É"""
        score = 0.0

        # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å—é
        student_major = next(k.split('_')[1] for k, v in student.items()
                             if k.startswith('major_') and v == 1)

        if student_major == 'CS' and course['category'] == 'Computer Science':
            score += 0.3
        elif student_major == 'Math' and course['category'] == 'Math':
            score += 0.4
        # ... –¥—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è

        # –£—á–µ—Ç –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
        year = student['year_of_study']
        if year >= 3 and course['difficulty_level'] == 'Hard':
            score += 0.2

        return min(1.0, score)

    def print_recommendations(self, recommendations: list):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π"""
        if not recommendations:
            print("\nü§∑ –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä–æ–≥—É")
            return

        print("\nüéì –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:")
        for i, course in enumerate(recommendations, 1):
            diff_color = {
                'Easy': '\033[92m',  # –∑–µ–ª–µ–Ω—ã–π
                'Medium': '\033[93m',  # –∂–µ–ª—Ç—ã–π
                'Hard': '\033[91m'  # –∫—Ä–∞—Å–Ω—ã–π
            }.get(course['difficulty'], '\033[0m')

            prob = course['calibrated_probability']
            if prob > 0.8:
                prob_color = '\033[92m'
            elif prob > 0.6:
                prob_color = '\033[93m'
            else:
                prob_color = '\033[91m'

            print(f"{i}. {course['course_name']} ({course['category']})")
            print(f"   {diff_color}–°–ª–æ–∂–Ω–æ—Å—Ç—å: {course['difficulty']}\033[0m")
            print(f"   {prob_color}–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prob:.2f}\033[0m")
            print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {course['match_score']:.2f}")
            print("-" * 50)


if __name__ == '__main__':
    try:
        recommender = CourseRecommender('C:/Users/dimas/CsvGenerator/src/course_recommender_nn.pt')
        courses_df = pd.read_csv('C:/Users/dimas/CsvGenerator/data/courses.csv')

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã
        test_students = [
            {
                'gpa': 3.0,
                'year_of_study': 3,
                'major_Math': 1,
                'major_CS': 0,
                'major_History': 0,
                'major_Physics': 0
            },
            {
                'gpa': 4.5,
                'year_of_study': 4,
                'major_CS': 1,
                'major_Math': 0,
                'major_History': 0,
                'major_Physics': 0
            }
        ]

        for i, student in enumerate(test_students, 1):
            print(f"\n{'=' * 60}")
            print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ #{i}:")
            print(
                f"- –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {next(k.split('_')[1] for k, v in student.items() if k.startswith('major_') and v == 1)}")
            print(f"- GPA: {student['gpa']}")
            print(f"- –ì–æ–¥ –æ–±—É—á–µ–Ω–∏—è: {student['year_of_study']}")

            recommendations = recommender.recommend_courses(
                student,
                courses_df,
                threshold=0.55,  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
                top_n=5
            )
            recommender.print_recommendations(recommendations)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")