import torch
import pandas as pd
import logging
import numpy as np
from sklearn.preprocessing import StandardScaler
from src.NeuralNetTrainer import Net

torch.serialization.add_safe_globals([
    StandardScaler,
    np._core.multiarray._reconstruct,
    np.ndarray,
    np.dtype,
    np.frombuffer
])

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class CourseRecommender:
    def __init__(self, model_path: str = None):
        self.model = None
        self.scaler = None
        self.feature_names = None

        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.weights = {
            'difficulty': {
                'Easy': 0.9,
                'Medium': 0.7,
                'Hard': 0.5
            },
            'major': {
                'CS': {'Computer Science': 1.2, 'Math': 1.1, 'Economics': 0.9},
                'Math': {'Math': 1.3, 'Physics': 1.2, 'Computer Science': 1.0},
                'History': {'History': 1.4, 'Philosophy': 1.1},
                'Physics': {'Physics': 1.3, 'Math': 1.2}
            },
            'year': {
                1: {'Easy': 1.2, 'Medium': 0.8, 'Hard': 0.5},
                2: {'Easy': 1.1, 'Medium': 1.0, 'Hard': 0.7},
                3: {'Easy': 1.0, 'Medium': 1.1, 'Hard': 0.9},
                4: {'Easy': 0.9, 'Medium': 1.2, 'Hard': 1.1}
            },
            'gpa': lambda gpa: min(1.5, 0.7 + gpa / 3.0)
        }

        if model_path:
            self.load_model(model_path)

    def load_model(self, model_path: str):
        try:
            checkpoint = torch.load(model_path, weights_only=False)
            self.model = Net(len(checkpoint['feature_names']))
            self.model.load_state_dict(checkpoint['model_state_dict'])
            self.model.eval()
            self.scaler = checkpoint['scaler']
            self.feature_names = checkpoint['feature_names']
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def calculate_final_score(self, student: dict, course: dict, raw_prob: float) -> float:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        major = next(k.split('_')[1] for k, v in student.items()
                     if k.startswith('major_') and v == 1)

        # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        base_score = raw_prob * self.weights['difficulty'].get(course['difficulty_level'], 1.0)

        # –£—á–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        major_factor = self.weights['major'].get(major, {}).get(course['category'], 1.0)

        # –£—á–µ—Ç –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
        year_factor = self.weights['year'].get(student['year_of_study'], {}).get(course['difficulty_level'], 1.0)

        # –£—á–µ—Ç GPA
        gpa_factor = self.weights['gpa'](student['gpa'])

        # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
        final_score = base_score * major_factor * year_factor * gpa_factor

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        return max(0.3, min(0.97, final_score))

    def prepare_student_data(self, student_data: dict) -> pd.DataFrame:
        required_fields = {'gpa', 'year_of_study'}
        if not required_fields.issubset(student_data.keys()):
            missing = required_fields - student_data.keys()
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing}")

        for major in ['CS', 'Math', 'History', 'Physics']:
            if f'major_{major}' not in student_data:
                student_data[f'major_{major}'] = 0

        return pd.DataFrame([student_data], columns=self.feature_names).fillna(0)

    def recommend_courses(self, student_data: dict, courses_df: pd.DataFrame,
                          top_n: int = 5) -> list:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        if not all([self.model, self.scaler, self.feature_names]):
            raise RuntimeError("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        recommendations = []
        student_df = self.prepare_student_data(student_data)

        for _, course in courses_df.iterrows():
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            input_data = student_df.copy()
            input_data[f'category_{course["category"]}'] = 1
            input_data[f'difficulty_level_{course["difficulty_level"]}'] = 1
            input_data['credits'] = course['credits']

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            input_scaled = self.scaler.transform(input_data)
            input_tensor = torch.tensor(input_scaled, dtype=torch.float32)

            with torch.no_grad():
                raw_prob = self.model(input_tensor).item()

            # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            final_score = self.calculate_final_score(student_data, course, raw_prob)

            recommendations.append({
                'course_id': course['course_id'],
                'course_name': course['name'],
                'category': course['category'],
                'difficulty': course['difficulty_level'],
                'raw_probability': raw_prob,
                'final_score': final_score,
                'match_description': self.get_match_description(student_data, course)
            })

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–±–æ—Ä —Ç–æ–ø-N
        recommendations.sort(key=lambda x: x['final_score'], reverse=True)
        return recommendations[:top_n]

    def get_match_description(self, student: dict, course: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        major = next(k.split('_')[1] for k, v in student.items()
                     if k.startswith('major_') and v == 1)

        descriptions = {
            'major': {
                'CS': {
                    'Computer Science': "–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è CS-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
                    'Math': "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≤–∞–∂–Ω–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                    'Economics': "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –¥–ª—è IT-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
                },
                'Math': {
                    'Math': "–û—Å–Ω–æ–≤–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
                    'Physics': "–§–∏–∑–∏–∫–∞ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏",
                    'Computer Science': "–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
                }
            },
            'difficulty': {
                'Easy': "–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                'Medium': "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                'Hard': "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
            }
        }

        major_desc = descriptions['major'].get(major, {}).get(course['category'],
                                                              "–ö—É—Ä—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        diff_desc = descriptions['difficulty'].get(course['difficulty_level'], "")

        return f"{major_desc}. {diff_desc}"

    def print_recommendations(self, recommendations: list):
        if not recommendations:
            print("\nü§∑ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return

        print("\nüéì –õ—É—á—à–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, course in enumerate(recommendations, 1):
            diff_color = {
                'Easy': '\033[92m',  # –∑–µ–ª–µ–Ω—ã–π
                'Medium': '\033[93m',  # –∂–µ–ª—Ç—ã–π
                'Hard': '\033[91m'  # –∫—Ä–∞—Å–Ω—ã–π
            }.get(course['difficulty'], '\033[0m')

            score = course['final_score']
            if score > 0.8:
                score_color = '\033[92m'
            elif score > 0.6:
                score_color = '\033[93m'
            else:
                score_color = '\033[91m'

            print(f"{i}. \033[1m{course['course_name']}\033[0m ({course['category']})")
            print(f"   {diff_color}–°–ª–æ–∂–Ω–æ—Å—Ç—å: {course['difficulty']}\033[0m")
            print(f"   {score_color}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–ª: {score:.2f}\033[0m")
            print(f"   \033[94m{course['match_description']}\033[0m")
            print("-" * 60)


if __name__ == '__main__':
    try:
        recommender = CourseRecommender('C:/Users/dimas/CsvGenerator/src/course_recommender_nn.pt')
        courses_df = pd.read_csv('C:/Users/dimas/CsvGenerator/data/courses.csv')

        test_students = [
            {
                'gpa': 3.0,
                'year_of_study': 3,
                'major_Math': 1,
                'major_CS': 0,
                'major_History': 0,
                'major_Physics': 0
            },
            {
                'gpa': 4.5,
                'year_of_study': 4,
                'major_CS': 1,
                'major_Math': 0,
                'major_History': 0,
                'major_Physics': 0
            }
        ]

        for i, student in enumerate(test_students, 1):
            print(f"\n{'=' * 70}")
            print(f"üìã –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ #{i}:")
            print(
                f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: \033[1m{next(k.split('_')[1] for k, v in student.items() if k.startswith('major_') and v == 1)}\033[0m")
            print(f"‚Ä¢ GPA: \033[1m{student['gpa']}\033[0m")
            print(f"‚Ä¢ –ì–æ–¥ –æ–±—É—á–µ–Ω–∏—è: \033[1m{student['year_of_study']}\033[0m")

            recommendations = recommender.recommend_courses(student, courses_df)
            recommender.print_recommendations(recommendations)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")