import torch
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from NeuralNetTrainer import Net
import joblib

torch.serialization.add_safe_globals([StandardScaler])

def load_model(filename='C:/Users/dimas/CsvGenerator/src/course_recommender_nn.pt'):
    checkpoint = torch.load(filename, weights_only=False)  # <-- –í–ê–ñ–ù–û!
    model = Net(len(checkpoint['feature_names']))
    model.load_state_dict(checkpoint['model_state_dict'])
    model.eval()
    scaler = checkpoint['scaler']
    feature_names = checkpoint['feature_names']
    return model, scaler, feature_names

def recommend_courses_for_student(student_data: dict, all_courses: pd.DataFrame, model, scaler, feature_names: list):
    recommendations = []

    for _, course in all_courses.iterrows():
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        input_data = student_data.copy()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫—É—Ä—Å–∞
        input_data['category_' + course['category']] = 1
        input_data['difficulty_level_' + course['difficulty_level']] = 1
        input_data['credits'] = course['credits']

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        input_df = pd.DataFrame([input_data], columns=feature_names).fillna(0)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å —Ç–µ–º –∂–µ scaler'–æ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
        input_scaled = scaler.transform(input_df)

        input_tensor = torch.tensor(input_scaled, dtype=torch.float32)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        with torch.no_grad():
            proba = model(input_tensor).item()

        if proba > 0.5:
            recommendations.append((course['name'], proba))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    recommendations.sort(key=lambda x: x[1], reverse=True)

    print("\nü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç:")
    for name, prob in recommendations:
        print(f"{name} ‚Üí –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prob:.2f}")

# üß™ –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ scaler
    model, scaler, feature_names = load_model()

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ students.csv)
    student_example = {
        'gpa': 4.2,
        'year_of_study': 2,
        'major_CS': 1,
        'major_History': 0,
        'major_Math': 0,
        'major_Physics': 0,
        # –û—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã
    courses = pd.read_csv('C:/Users/dimas/CsvGenerator/data/courses.csv')

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommend_courses_for_student(student_example, courses, model, scaler, feature_names)
